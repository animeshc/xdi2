xdi-graph               = xdi-statement *( ( CR / LF / CRLF ) xdi-statement )
xdi-statement           = contextual / relational / literal

contextual              = direct / inverse
direct                  = absolute / peer-relative / context-relative / collection-relative
inverse                 = absolute-inverse / peer-inverse / context-inverse / collection-inverse
absolute                = "()/()/" context
peer-relative           = peer "/()/" context
context-relative        = context "/()/" relative-context
collection-relative     = [ peer ] collection-context "/()/" member-context
absolute-inverse        = context "/$is()/()"
peer-inverse            = context "/$is()/" peer
context-inverse         = relative-context "/$is()/" context
collection-inverse      = member-context "/$is()/" [ peer ] collection-context

relational              = direct-relation / inverse-relation
direct-relation         = context "/" context "/" context
inverse-relation        = context "/$is" context "/" context

literal                 = literal-value / literal-ref
literal-value           = [ peer ] literal-context "/!/" data-xref
literal-ref             = [ peer ] literal-context "/!/()"

context                 = peer-relative-context / peer / relative-context
peer                    = 1*xref
peer-relative-context   = peer relative-context
relative-context        = 1*( singleton / ( collection [ member ] ) )

collection-context      = ( singleton collection-context ) / ( collection collection-context ) / ( collection member collection-context ) / collection

member-context          = member [ relative-context ]

literal-context         = ( singleton literal-context ) / ( collection literal-context ) / ( collection member literal-context ) / attribute-member / attribute-singleton

xref                    = "(" ( context / inner-root / xdi-statement / iri-literal / xdi-literal ) ")"
inner-root              = context "/" context
iri-literal             = iri-scheme ":" *iri-char
xdi-literal             = 1*xdi-char

subgraph                = collection / member / singleton

collection              = "&" xref

member                  = entity-member / attribute-member / order-ref
entity-member           = ":" xref
attribute-member        = ";" xref
order-ref               = "$" 1*DIGIT

singleton               = attribute-singleton / entity-singleton

attribute-singleton     = ",(" type ")"

entity-singleton        = type / instance
type                    = specific / generic
instance                = person / organization / mutable / immutable
specific                = "$" [ xref / xdi-literal ]
generic                 = "+" [ xref / xdi-literal ]
person                  = "=" [ xref / xdi-literal ]
organization            = "@" [ xref / xdi-literal ]
mutable                 = "*" [ xref / xdi-scheme / xdi-literal ]
immutable               = "!" [ xref / xdi-scheme / xdi-literal ]
xdi-scheme              = uuid / ipv6
uuid                    = ":uuid:" time-low "-" time-mid "-" time-high-and-version "-" clock-seq-and-reserved clock-seq-low "-" node
time-low                = 4*hexoctet
time-mid                = 2*hexoctet
time-high-and-version   = 2*hexoctet
clock-seq-and-reserved  = hexoctet
clock-seq-low           = hexoctet
node                    = 6*hexoctet
hexoctet                = HEXDIG HEXDIG
ipv6                    = ":ipv6:" 4HEXDIG 7*( ":" 4HEXDIG )

data-xref               = "(" data-iri ")"
data-iri                = "data:," 1*iri-char

iri-scheme              = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )  
iri-char                = xdi-char / nonparen-delim                                          ; "(" and ")" are excluded
nonparen-delim          = ":" / "/" / "?" / "#" / "[" / "]" / "@" / "!" / "$" / "&" / "'" / "*" / "+" / "," / ";" / "="

xdi-char                = iunreserved / pct-encoded
iunreserved             = ALPHA / DIGIT / "-" / "." / "_" / "~" / ucschar
pct-encoded             = "%" HEXDIG HEXDIG
ucschar                 = %xA0-D7FF / %xF900-FDCF / %xFDF0-FFEF
ALPHA                   =  %x41-5A / %x61-7A   ; A-Z / a-z
DIGIT                   =  %x30-39     ; 0-9
HEXDIG                  =  DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
CRLF                    = CR LF
CR                      = %x0D
LF                      = %x0A
